# -*- coding: utf-8 -*-
"""Heart_Attack_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ARyiduruAa5D3KvIv1LWXJUx4ycRL1zD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

heart = pd.read_csv("heart_org.csv")

"""# **Data Repersentation of Original Dataset:**"""

heart.head()

heart.tail()

heart[20:30]

heart.info()

heart.describe()

"""From the above information:
* count will tell the number of entries in the column.
* mean will tell the average of the column.
* std mean standard deviation of the column.
* min - the minimum value.
* 25% - The 25% percentile.
* 50% - The 50% percentile.
* 75% - The 75% percentile.
* max - the maximum value.
"""

heart.age

heart.sex

heart.cp

heart.chol

heart.fbs

heart.trtbps

heart.count()

heart.age.value_counts()

heart.age.value_counts()

heart.cp.value_counts()

heart.trtbps.value_counts()

heart.chol.value_counts()

heart.fbs.value_counts()

heart.restecg.value_counts()

heart.age.duplicated()

heart.corr()

print(heart)

"""**Data Manipulation:**
New dataset is Used by removing some of the data columns from the original dataset
"""

SA=pd.read_csv("heart.csv")
SA.head()

SA.tail()

SA.describe()

"""**DATA MANIPULATION:**"""

sns.heatmap(SA.isnull())

sns.distplot(SA.output)

sea = sns.FacetGrid(SA, col = "output", height = 4)
sea.map(sns.distplot, "sex")

sns.displot(SA['age'], kde=True)

sea = sns.FacetGrid(SA, col = "output", height = 4)
sea.map(sns.distplot, "chol")

sea.map(sns.displot, "age")

sns.set_context("notebook")
sns.relplot(data=SA, x="age", y="maxi", kind="line", ci=None)

sns.set_context("notebook")
sns.relplot(data=SA , x="age", y="resting", kind="line", ci=None)

sns.set_context("notebook")
sns.relplot(data=heart, x="age", y="chol", kind="line", ci=None)

sns.set_context("notebook")
sns.relplot(data=heart, x="age", y="fbs", kind="line", ci=None)

sns.set_context("notebook")
sns.relplot(data=heart, x="age", y="cp", kind="line", ci=None)

sns.set_context("notebook")
sns.relplot(data=heart, x="age", y="sex", kind="line", ci=None)

plt.scatter(SA.age,SA.maxi)
plt.title("Age vs Max Blood Pressure")
plt.xlabel("Age")
plt.ylabel("Max Blood Pressure")
plt.show()

plt.scatter(SA.age,SA.cp)
plt.title("Age vs Chest pain")
plt.xlabel("Age")
plt.ylabel("Chest pain type")
plt.show()

plt.scatter(SA.sex,SA.resting)
plt.title("Gender Vs Restiing Blood Pressure")
plt.xlabel("sex")
plt.ylabel("Resting Blood Pressure")
plt.show()

plt.scatter(SA.sex,SA.cp)
plt.title("Gender Vs Chest pain")
plt.xlabel("Sex")
plt.ylabel("Chest pain")
plt.show()

plt.scatter(SA.sex,SA.chol)
plt.title("Gender Vs Cholestoral")
plt.xlabel("sex")
plt.ylabel("cholestoral")
plt.text(
    0,0,
    "0-male\n1-female",
)
plt.show()

plt.scatter(SA.sex,SA.maxi)
plt.title("Gender Vs Max Blood Pressure")
plt.xlabel("Sex")
plt.ylabel("Max Blood Pressure")
plt.show()

plt.scatter(SA.sex,SA.age)
plt.title("Age Vs Gender")
plt.xlabel("Sex")
plt.ylabel("Age")
plt.show()

sns.relplot(data=SA, x="resting", y="maxi", hue="age")

sns.relplot(data=SA, x="resting", y="maxi", hue="sex", col="age", col_wrap=3)

sns.set_context("poster")
sns.relplot(data=SA, x="resting", y="maxi", hue="age", col="sex", col_wrap=3)

sns.set_context("poster")
sns.relplot(data=SA, x="age", y="chol", hue="age", col="sex", col_wrap=3)

sns.set_context("poster")
sns.relplot(data=SA, x="cp", y="chol", hue="age", col="sex", col_wrap=3)

df=pd.read_csv("heart.csv")
sns.set_style("ticks")
sns.pairplot(df,height=1.5, hue = 'sex',diag_kind = "kde",kind = "scatter",palette = "husl")
plt.show()

df=pd.read_csv("heart.csv")
sns.set_style("ticks")
sns.pairplot(df,height=2, hue = 'sex',diag_kind = "hist",kind = "scatter",palette = "husl")
plt.show()

sns.pairplot(df, kind="hist")

sns.pointplot( x="age", y="cp", data=df)
plt.show()

sns.pointplot( x="age", y="cp", data=df, hue="sex")
plt.show()

sns.pointplot( x="age", y="resting", data=df)
plt.show()

sns.pointplot( x="age", y="chol", data=df)
plt.show()

sns.pointplot( x="fbs", y="age", data=df)
plt.show()

sns.pointplot( x="age", y="maxi", data=df)
plt.show()

SA=pd.read_csv("heart.csv")
SA.head()

sns.jointplot(x='age', y='resting', data=SA, kind='reg')

sns.jointplot(x='age', y='resting', data=SA, kind='kde')

sns.jointplot(x='age', y='resting', data=SA, kind='hist')

sns.jointplot(x='age', y='resting', data=SA, kind='hex')

sns.jointplot(x='age', y='sex', data=SA, kind='reg')

sns.jointplot(x='age', y='cp', data=SA, kind='kde')

sns.jointplot(x='age', y='chol', data=SA, kind='hist')

sns.jointplot(x='age', y='fbs', data=SA, kind='hex')

sns.jointplot(x='age', y='maxi', data=SA, kind='reg')

sns.jointplot(x='age', y='sex', data=SA, kind='kde')

sns.jointplot(x='age', y='cp', data=SA, kind='kde')

sns.jointplot(x='age', y='resting', data=SA, kind='kde')

sns.jointplot(x='age', y='chol', data=SA, kind='hist')

sns.jointplot(x='age', y='fbs', data=SA, kind='reg')

sns.jointplot(x='age', y='maxi', data=SA, kind='hex')

sns.jointplot(x='age', y='sex', data=SA, kind='kde')

sns.jointplot(x='age', y='cp', data=SA, kind='hex')

sns.jointplot(x='age', y='cp', data=SA, kind='hist')

sns.jointplot(x='age', y='resting', data=SA, kind='hex')

sns.jointplot(x='age', y='chol', data=SA, kind='hex')

sns.jointplot(x='age', y='fbs', data=SA, kind='reg')

sns.jointplot(x='age', y='maxi', data=SA, kind='kde')

ax = sns.boxplot(x=SA['age'])

ax = sns.boxplot(x=SA['sex'])

ax = sns.boxplot(x=SA['cp'])

ax = sns.boxplot(x=SA['resting'])

ax = sns.boxplot(x=SA['chol'])

ax = sns.boxplot(x=SA['fbs'])

ax = sns.boxplot(x=SA['maxi'])

ax = sns.violinplot(x=SA['age'])

sns.lmplot(x='age', y='maxi', data=SA)

sns.lmplot(x='age', y='resting', data=SA)

sns.lmplot(x='age', y='cp', data=SA)

sns.lmplot(x='age', y='sex', data=SA)

sns.lmplot(x='age', y='chol', data=SA)

SA.dtypes

SA.size

SA.output.value_counts()

x = df.iloc[:, :13]
x

x = x.values
x

y = df.iloc[:, -1]
y

y = y.values
y

"""**Create Testing And Training Dataset:**"""

y = SA['output']
X = SA[['age']]

X

y

"""**Spliting The Dataset:**"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

"""**Train The Model:**"""

X_train.shape
from sklearn.linear_model import LinearRegression

regressor = LinearRegression(fit_intercept = True)
regressor.fit(X_train,y_train)

print('Linear Model Coefficient (m): ', regressor.coef_)
print('Linear Model Coefficient (b): ', regressor.intercept_)

"""**Test The Model (Linear Regression) :**"""

y_predict = regressor.predict( X_test)
y_predict

y_test

plt.scatter(X_train, y_train, color = 'gray')
plt.plot(X_train, regressor.predict(X_train), color = 'red')
plt.ylabel('output')
plt.xlabel('age')
plt.title('Output vs Age')

plt.scatter(X_test, y_test, color = 'gray')
plt.plot(X_test, regressor.predict(X_test), color = 'red')
plt.ylabel('Output')
plt.xlabel('Age')
plt.title('Age Vs Output')

"""**Evaluate The Model (Linear Regression) :**"""

from sklearn.metrics import mean_squared_error
acc = mean_squared_error(y_test,y_predict)
print("Mean Square Error : ",acc)
wts = regressor.coef_
incpt = regressor.intercept_
print("Slope :",wts,"\nIntercept ",incpt)

regressor.predict(X_test)

"""**Spliting The Dataset (Gaussian Navie Bayes) :**"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score, confusion_matrix, ConfusionMatrixDisplay, classification_report, roc_auc_score, PrecisionRecallDisplay, RocCurveDisplay
model_gnb = GaussianNB()
model_gnb.fit(x_train, y_train)

"""**Training The Model (Gaussian Navie Bayes) :**"""

def perform(y_pred):
    print("Precision : ", precision_score(y_test, y_pred))
    print("Recall : ", recall_score(y_test, y_pred))
    print("Accuracy : ", accuracy_score(y_test, y_pred))
    print("F1 Score : ", f1_score(y_test, y_pred))
    print("ROC-AUC Score : ", roc_auc_score(y_test, y_pred))
    print("\n", confusion_matrix(y_test, y_pred))
    print("\n")
    cm = ConfusionMatrixDisplay(confusion_matrix = confusion_matrix(y_test, y_pred), display_labels=['Low', 'High'])
    cm.plot()

"""**Testing The model (Gaussian naive Bayes) :**"""

GaussianNB()

y_pred_gnb = model_gnb.predict(x_test)

perform(y_pred)

print(classification_report(y_test, y_pred_gnb))

model_gnb.predict(x_test)

score = accuracy_score(y_test, y_pred)
print(score)

"""**Training The Model (Multinomial Navie Bayes) :**"""

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
model_mnb = MultinomialNB()
model_mnb.fit(x_train, y_train)

MultinomialNB()

y_pred_mnb = model_mnb.predict(x_test)

perform(y_pred_mnb)

print(classification_report(y_test, y_pred_mnb))

model_mnb.predict(x_test)

score = accuracy_score(y_test, y_pred)
print(score)

"""**Training The Model (Logistic Regreasion) :**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
model_lr = LogisticRegression()
model_lr.fit(x_train, y_train)

LogisticRegression()

y_pred_lr = model_lr.predict(x_test)

perform(y_pred_lr)

print(classification_report(y_test, y_pred_lr))

model_lr.predict(x_test)

score = accuracy_score(y_test, y_pred)
print(score)

"""**Training The Model (Decision Tree) :**"""

from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score 
model_dt = DecisionTreeClassifier()
model_dt.fit(x_train, y_train)

DecisionTreeClassifier()

y_pred_dt = model_dt.predict(x_test)

perform(y_pred_dt)

print(classification_report(y_test, y_pred_dt))

model_dt.predict(x_test)

score = accuracy_score(y_test, y_pred)
print(score)

"""**Decision Tree Visualization :**"""

feature_names = df.columns[0:13]
viz = df.copy()
viz["output"]=viz["output"].values.astype(str)
print(viz.dtypes)
target_names = viz['output'].unique().tolist()

target_names

plt.figure(figsize=(6, 10))
plot_tree(model_dt, feature_names = feature_names, class_names = target_names, filled = True, rounded = False)

